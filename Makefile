WARNINGS 	=
ELIOMC 		= eliomc $(WARNINGS)
JS_OF_ELIOM = js_of_eliom $(WARNINGS)
OCAMLC 		= ocamlfind ocamlc $(WARNINGS)

SERVER_DIR = server
CLIENT_DIR = client

export ELIOM_TYPE_DIR = _server
export ELIOM_SERVER_DIR = _server
export ELIOM_CLIENT_DIR = _client

include Makefile.options
include Makefile.depend

SERVER_OPTS := $(addprefix -package , $(SERVER_PA))
CLIENT_OPTS := $(addprefix -package , $(CLIENT_PA))

TYPE_DIRS   = $(addprefix $(ELIOM_TYPE_DIR)/, $(SERVER_SOURCE_DIR))
SERVER_DIRS = $(addprefix $(ELIOM_SERVER_DIR)/, $(SERVER_SOURCE_DIR))
CLIENT_DIRS = $(addprefix $(ELIOM_CLIENT_DIR)/, $(CLIENT_SOURCE_DIR))

SERVER_COMP_OPTS := $(addprefix -I , $(SERVER_DIRS))\
					$(addprefix -I , $(TYPE_DIRS))
CLIENT_COMP_OPTS := $(addprefix -I , $(CLIENT_DIRS))

.PHONY: all clean install uninstall reinstall depend

all: Makefile.depend\
	 $(addprefix $(ELIOM_SERVER_DIR)/, $(server_cmo_files))\
	 $(addprefix $(ELIOM_CLIENT_DIR)/, $(client_cmo_files))\
	 $(PKG_NAME).client.cma $(PKG_NAME).server.cma\
	 META

Makefile.depend:
	echo "# THIS FILE HAS BEEN GENERATED BY THE INSTALLATION MAKEFILE, DON'T EDIT.\n"\
	"server_cmo_files :=\
	$(patsubst %.ml,%.cmo,\
	$(patsubst %.eliom,%.cmo,\
	$(patsubst %.eliomi,%.cmi,\
	$(shell eliomdep -server -sort $(SERVER_OPTS) $(SERVER_SOURCE_FILES)\
	))))\n"\
	"client_cmo_files :=\
	$(patsubst %.eliom,%.cmo,\
	$(patsubst %.eliomi,%.cmi,\
	$(shell eliomdep -client -sort $(CLIENT_OPTS) $(CLIENT_SOURCE_FILES)\
	)))\n"\
	> Makefile.depend

$(ELIOM_TYPE_DIR)/%.type_mli: %.eliom
	$(ELIOMC) -infer -package js_of_ocaml $(SERVER_COMP_OPTS) $(COMMON_OPTS) $(SERVER_OPTS) $<

$(ELIOM_SERVER_DIR)/%.cmi: %.mli
	$(ELIOMC) -c $(SERVER_COMP_OPTS) $(COMMON_OPTS) $(SERVER_OPTS) $<

$(ELIOM_SERVER_DIR)/%.cmo: %.ml
	$(ELIOMC) -c $(SERVER_COMP_OPTS) $(COMMON_OPTS) $(SERVER_OPTS) $<

$(ELIOM_SERVER_DIR)/%.cmi: %.eliomi
	$(ELIOMC) -c $(SERVER_COMP_OPTS) $(COMMON_OPTS) $(SERVER_OPTS) $<

$(ELIOM_SERVER_DIR)/%.cmo: %.eliom
	$(ELIOMC) -c $(SERVER_COMP_OPTS) $(COMMON_OPTS) $(SERVER_OPTS) $<

$(ELIOM_CLIENT_DIR)/%.cmi: %.eliomi
	$(JS_OF_ELIOM) -c $(CLIENT_COMP_OPTS) $(COMMON_OPTS) $(CLIENT_OPTS) $<

$(ELIOM_CLIENT_DIR)/%.cmo: %.eliom
	$(JS_OF_ELIOM) -c $(CLIENT_COMP_OPTS) $(COMMON_OPTS) $(CLIENT_OPTS) $<

%.cmo: %.ml
	$(OCAMLC) -syntax camlp4o $(SERVER_OPTS) -c -o $@ $<

ifneq ($(MAKECMDGOALS),distclean)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),depend)
    include .depend
endif
endif
endif

.depend:
	eliomdep -server $(SERVER_OPTS) $(SERVER_SOURCE_FILES) > .depend
	eliomdep -client $(CLIENT_OPTS) $(CLIENT_SOURCE_FILES) >> .depend

depend:
	eliomdep -server $(SERVER_OPTS) $(SERVER_SOURCE_FILES) > .depend
	eliomdep -client $(CLIENT_OPTS) $(CLIENT_SOURCE_FILES) >> .depend

clean:
	rm -rf *.cmi *.cmo *.cma $(ELIOM_TYPE_DIR) $(ELIOM_SERVER_DIR) $(ELIOM_CLIENT_DIR) META

distclean: clean
	rm -rf Makefile.depend .depend

# FIXME: useless ? we don't use the cma for the client package
$(PKG_NAME).client.cma: $(addprefix $(ELIOM_CLIENT_DIR)/, $(client_cmo_files))
	$(ELIOMC) -a -o $@ $^

$(PKG_NAME).server.cma: $(addprefix $(ELIOM_SERVER_DIR)/, $(server_cmo_files))
	$(ELIOMC) -a -o $@ $^

META: META.in Makefile .depend
	sed -e 's#@@SERVER_FILES@@#$(PKG_NAME).server.cma#g' \
            -e 's#@@SERVER_PA@@#$(SERVER_PA)#g' \
            -e 's#@@CLIENT_FILES@@#$(PKG_NAME).client.cma#g' \
            -e 's#@@CLIENT_PA@@#$(CLIENT_PA)#g' \
            -e 's#@@DESCRIPTION@@#$(PKG_DESCRIPTION)#g' \
            -e 's#@@NAME@@#"$(PKG_NAME)"#g' \
            -e 's#@@VERSION@@#$(PKG_VERSION)#g' \
	  $< > $@

install: all
	ocamlfind install $(PKG_NAME) META
	mkdir `ocamlfind query $(PKG_NAME)`/$(SERVER_DIR)
	mkdir `ocamlfind query $(PKG_NAME)`/$(CLIENT_DIR)
	cp _server/src/eliom_widgets.cmi  `ocamlfind query $(PKG_NAME)`/$(SERVER_DIR)
	cp $(PKG_NAME).server.cma `ocamlfind query $(PKG_NAME)`/$(SERVER_DIR)
	# need to copy cmo files for the client, (this prevent from js modules linking errors)
	cp _client/src/eliom_widgets.cmi  `ocamlfind query $(PKG_NAME)`/$(CLIENT_DIR)
	cp $(PKG_NAME).client.cma `ocamlfind query $(PKG_NAME)`/$(CLIENT_DIR)
	#cp $(addsuffix *.cmo, $(CLIENT_DIRS)) `ocamlfind query $(PKG_NAME)`/$(CLIENT_DIR)

uninstall:
	rm -rf `ocamlfind query $(PKG_NAME)`/$(SERVER_DIR)
	rm -rf `ocamlfind query $(PKG_NAME)`/$(CLIENT_DIR)
	ocamlfind remove $(PKG_NAME)

reinstall: uninstall install
